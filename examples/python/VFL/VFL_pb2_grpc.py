# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import VFL_pb2 as VFL__pb2


class GreeterStub(object):
    """The greeting service definition.
    Sends a greeting
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Aggregate = channel.stream_stream(
                '/helloworld.Greeter/Aggregate',
                request_serializer=VFL__pb2.partialsum.SerializeToString,
                response_deserializer=VFL__pb2.loss.FromString,
                )


class GreeterServicer(object):
    """The greeting service definition.
    Sends a greeting
    """

    def Aggregate(self, request_iterator, context):
        """rpc SayHello (HelloRequest) returns (HelloReply) {}

        rpc SendSum (ArithRequest) returns (ArithReply) {}

        rpc SendDiff(ArithRequest) returns (ArithReply) {}

        rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {}

        rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Aggregate': grpc.stream_stream_rpc_method_handler(
                    servicer.Aggregate,
                    request_deserializer=VFL__pb2.partialsum.FromString,
                    response_serializer=VFL__pb2.loss.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'helloworld.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeting service definition.
    Sends a greeting
    """

    @staticmethod
    def Aggregate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/helloworld.Greeter/Aggregate',
            VFL__pb2.partialsum.SerializeToString,
            VFL__pb2.loss.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
